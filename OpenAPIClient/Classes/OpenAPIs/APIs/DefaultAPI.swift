//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DefaultAPI {
    /**
     Create New Model
     
     - parameter modelName: (query) Set a name for your model 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createNewModel(modelName: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createNewModelWithRequestBuilder(modelName: modelName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Create New Model
     - PUT /models
     - Create a new custom image recognition model
     - API Key:
       - type: apiKey x-api-key 
       - name: x-api-key
     - parameter modelName: (query) Set a name for your model 
     - returns: RequestBuilder<Void> 
     */
    open class func createNewModelWithRequestBuilder(modelName: String) -> RequestBuilder<Void> {
        let path = "/models"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "model_name": modelName.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete Model
     
     - parameter modelId: (query) You can find your model ids from Classify Dashboard. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteModel(modelId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteModelWithRequestBuilder(modelId: modelId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Delete Model
     - DELETE /models
     - Delete Model
     - API Key:
       - type: apiKey x-api-key 
       - name: x-api-key
     - parameter modelId: (query) You can find your model ids from Classify Dashboard. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteModelWithRequestBuilder(modelId: String) -> RequestBuilder<Void> {
        let path = "/models"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "model_id": modelId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Models List
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getModelsList(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getModelsListWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Get Models List
     - GET /models
     - Get the list of of models created 
     - API Key:
       - type: apiKey x-api-key 
       - name: x-api-key
     - returns: RequestBuilder<Void> 
     */
    open class func getModelsListWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/models"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Tag Image by Using Image Url
     
     - parameter modelId: (query) Type your trained model id to predict. You get your model&#39;s id from Classify Dashboard. 
     - parameter imageUrl: (query) Provide image url to predict 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tagImageByUrl(modelId: String, imageUrl: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        tagImageByUrlWithRequestBuilder(modelId: modelId, imageUrl: imageUrl).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Tag Image by Using Image Url
     - GET /predict_by_image_url
     - Predict image tags by providing image url
     - API Key:
       - type: apiKey x-api-key 
       - name: x-api-key
     - parameter modelId: (query) Type your trained model id to predict. You get your model&#39;s id from Classify Dashboard. 
     - parameter imageUrl: (query) Provide image url to predict 
     - returns: RequestBuilder<Void> 
     */
    open class func tagImageByUrlWithRequestBuilder(modelId: String, imageUrl: String) -> RequestBuilder<Void> {
        let path = "/predict_by_image_url"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "model_id": modelId.encodeToJSON(), 
            "image_url": imageUrl.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Predict by Image
     
     - parameter modelId: (query) Type your trained model id to predict. You get your model&#39;s id from Classify Dashboard. 
     - parameter file: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tagLocalImage(modelId: String, file: URL? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        tagLocalImageWithRequestBuilder(modelId: modelId, file: file).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Predict by Image
     - POST /predict
     - Send a local image to tag
     - API Key:
       - type: apiKey x-api-key 
       - name: x-api-key
     - parameter modelId: (query) Type your trained model id to predict. You get your model&#39;s id from Classify Dashboard. 
     - parameter file: (form)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func tagLocalImageWithRequestBuilder(modelId: String, file: URL? = nil) -> RequestBuilder<Void> {
        let path = "/predict"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "model_id": modelId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update Model
     
     - parameter modelName: (query) Model Name 
     - parameter modelId: (query) Model id to be renamed. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateModel(modelName: String, modelId: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateModelWithRequestBuilder(modelName: modelName, modelId: modelId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Update Model
     - POST /models
     - Update Model Name
     - API Key:
       - type: apiKey x-api-key 
       - name: x-api-key
     - parameter modelName: (query) Model Name 
     - parameter modelId: (query) Model id to be renamed. 
     - returns: RequestBuilder<Void> 
     */
    open class func updateModelWithRequestBuilder(modelName: String, modelId: String) -> RequestBuilder<Void> {
        let path = "/models"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "model_name": modelName.encodeToJSON(), 
            "model_id": modelId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
